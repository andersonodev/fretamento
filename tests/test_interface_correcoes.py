#!/usr/bin/env python3
"""
Teste das Corre√ß√µes de Interface - Calend√°rios e Supervisor
Script para verificar se as corre√ß√µes foram aplicadas corretamente
"""

import os
import re
from pathlib import Path

def testar_calendarios_portugues():
    """Testa se todos os campos de data t√™m lang='pt-BR'"""
    print("üîç TESTANDO CALEND√ÅRIOS EM PORTUGU√äS...")
    
    templates_dir = Path('templates')
    campos_data_sem_lang = []
    campos_data_com_lang = []
    
    # Buscar todos os arquivos HTML
    for html_file in templates_dir.rglob('*.html'):
        with open(html_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # Encontrar todos os campos type="date"
        date_fields = re.findall(r'<input[^>]*type="date"[^>]*>', content)
        
        for field in date_fields:
            if 'lang="pt-BR"' in field:
                campos_data_com_lang.append(f"{html_file}: {field[:80]}...")
            else:
                campos_data_sem_lang.append(f"{html_file}: {field[:80]}...")
    
    print(f"‚úÖ Campos de data COM lang='pt-BR': {len(campos_data_com_lang)}")
    for campo in campos_data_com_lang[:5]:  # Mostrar apenas 5 primeiros
        print(f"   üìÖ {campo}")
    
    if campos_data_sem_lang:
        print(f"‚ùå Campos de data SEM lang='pt-BR': {len(campos_data_sem_lang)}")
        for campo in campos_data_sem_lang:
            print(f"   ‚ö†Ô∏è {campo}")
        return False
    else:
        print("‚úÖ Todos os campos de data t√™m localiza√ß√£o em portugu√™s!")
        return True

def testar_remocao_supervisor():
    """Testa se a palavra 'Supervisor' foi removida/substitu√≠da"""
    print("\nüîç TESTANDO REMO√á√ÉO/SUBSTITUI√á√ÉO DE 'SUPERVISOR'...")
    
    templates_dir = Path('templates')
    ocorrencias_supervisor = []
    
    # Buscar arquivos HTML principais (n√£o _old ou _backup)
    for html_file in templates_dir.rglob('*.html'):
        if '_old' in str(html_file) or '_backup' in str(html_file):
            continue
            
        with open(html_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # Buscar ocorr√™ncias de 'supervisor' (case insensitive)
        if re.search(r'supervisor', content, re.IGNORECASE):
            lines = content.split('\n')
            for i, line in enumerate(lines, 1):
                if re.search(r'supervisor', line, re.IGNORECASE):
                    ocorrencias_supervisor.append(f"{html_file}:{i} - {line.strip()}")
    
    if ocorrencias_supervisor:
        print(f"‚ö†Ô∏è Ainda existem {len(ocorrencias_supervisor)} ocorr√™ncias de 'Supervisor':")
        for ocorrencia in ocorrencias_supervisor:
            print(f"   üìç {ocorrencia}")
        return False
    else:
        print("‚úÖ Palavra 'Supervisor' removida/substitu√≠da com sucesso!")
        return True

def verificar_substituicoes_corretas():
    """Verifica se as substitui√ß√µes foram feitas corretamente"""
    print("\nüîç VERIFICANDO SUBSTITUI√á√ïES CORRETAS...")
    
    # Verificar se 'Administrador' foi adicionado
    base_html = Path('templates/base.html')
    home_html = Path('templates/core/home.html')
    
    sucesso = True
    
    if base_html.exists():
        with open(base_html, 'r', encoding='utf-8') as f:
            content = f.read()
        if 'Administrador' in content:
            print("‚úÖ base.html: 'Administrador' encontrado")
        else:
            print("‚ùå base.html: 'Administrador' N√ÉO encontrado")
            sucesso = False
    
    if home_html.exists():
        with open(home_html, 'r', encoding='utf-8') as f:
            content = f.read()
        if 'Administrador' in content:
            print("‚úÖ home.html: 'Administrador' encontrado")
        else:
            print("‚ùå home.html: 'Administrador' N√ÉO encontrado")
            sucesso = False
    
    return sucesso

def main():
    """Executa todos os testes"""
    print("=" * 60)
    print("üß™ TESTE DAS CORRE√á√ïES DE INTERFACE")
    print("=" * 60)
    
    resultados = []
    
    # Teste 1: Calend√°rios em portugu√™s
    resultados.append(testar_calendarios_portugues())
    
    # Teste 2: Remo√ß√£o de supervisor
    resultados.append(testar_remocao_supervisor())
    
    # Teste 3: Verificar substitui√ß√µes
    resultados.append(verificar_substituicoes_corretas())
    
    print("\n" + "=" * 60)
    print("üìä RESUMO DOS TESTES")
    print("=" * 60)
    
    if all(resultados):
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Calend√°rios em portugu√™s: OK")
        print("‚úÖ Remo√ß√£o de supervisor: OK")
        print("‚úÖ Substitui√ß√µes corretas: OK")
        return True
    else:
        print("‚ùå ALGUNS TESTES FALHARAM!")
        print(f"‚ùå Calend√°rios em portugu√™s: {'OK' if resultados[0] else 'FALHOU'}")
        print(f"‚ùå Remo√ß√£o de supervisor: {'OK' if resultados[1] else 'FALHOU'}")
        print(f"‚ùå Substitui√ß√µes corretas: {'OK' if resultados[2] else 'FALHOU'}")
        return False

if __name__ == "__main__":
    import os
    os.chdir('/Users/anderson/my_folders/repositoriolocal/fretamento-intertouring')
    success = main()
    exit(0 if success else 1)
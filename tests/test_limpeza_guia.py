"""
Teste para validar a limpeza de servi√ßos com C/GUIA e S/GUIA
"""
import re

def limpar_servico(servico_original: str) -> str:
    """Replica a l√≥gica de limpeza de servi√ßos"""
    if not servico_original or servico_original == 'nan':
        return ""
    
    servico = str(servico_original).strip()
    
    # 1. Limpeza e substitui√ß√µes gerais
    servico = re.sub(r'^\d+\s*[-‚Äì]?\s*', '', servico)  # Remove prefixo num√©rico
    
    # 2. Substitui√ß√µes espec√≠ficas para GUIA - apenas se o servi√ßo cont√©m esses termos
    if re.search(r'S\s*\/\s*GUIA', servico, flags=re.IGNORECASE):
        servico = re.sub(r'S\s*\/\s*GUIA', 'Sem Guia', servico, flags=re.IGNORECASE)
    
    if re.search(r'C\s*\/\s*GUIA', servico, flags=re.IGNORECASE):
        servico = re.sub(r'C\s*\/\s*GUIA', 'Com Guia', servico, flags=re.IGNORECASE)
    
    servico = re.sub(r'P\/\s*', 'PARA ', servico, flags=re.IGNORECASE)  # Substitui "P/" por "PARA "
    servico = re.sub(r'\bZ\.SUL\b', 'ZONA SUL', servico, flags=re.IGNORECASE)  # Substitui "Z.SUL"
    
    # 2. Limpeza final
    servico = re.sub(r'\s*-\s*$', '', servico).strip()  # Remove h√≠fen final
    servico = re.sub(r'\s{2,}', ' ', servico).strip()  # Remove espa√ßos duplos
    
    return servico

def test_limpeza_guia():
    """Testa se C/GUIA e S/GUIA s√£o corretamente substitu√≠dos"""
    
    # Casos de teste para convers√£o (servi√ßos que DEVEM ser convertidos)
    test_cases_conversao = [
        ("TOUR P/ B√öZIOS C/GUIA", "TOUR PARA B√öZIOS Com Guia"),
        ("TOUR P/ B√öZIOS S/GUIA", "TOUR PARA B√öZIOS Sem Guia"),
        ("TOUR P/ B√öZIOS C / GUIA", "TOUR PARA B√öZIOS Com Guia"),
        ("TOUR P/ B√öZIOS S / GUIA", "TOUR PARA B√öZIOS Sem Guia"),
        ("001 - TOUR P/ B√öZIOS C/GUIA", "TOUR PARA B√öZIOS Com Guia"),
        ("CITY TOUR C/GUIA", "CITY TOUR Com Guia"),
        ("PASSEIO S/GUIA", "PASSEIO Sem Guia"),
        ("TOUR P/ B√öZIOS c/guia", "TOUR PARA B√öZIOS Com Guia"),  # lowercase
        ("TOUR P/ B√öZIOS s/guia", "TOUR PARA B√öZIOS Sem Guia"),  # lowercase
    ]
    
    # Casos de teste para N√ÉO convers√£o (servi√ßos que N√ÉO devem ser convertidos)
    test_cases_sem_conversao = [
        ("TRANSFER IN AEROPORTO", "TRANSFER IN AEROPORTO"),
        ("TRANSFER OUT HOTEL", "TRANSFER OUT HOTEL"),
        ("CITY TOUR PRIVATIVO", "CITY TOUR PRIVATIVO"),
        ("DISPOSI√á√ÉO 4H", "DISPOSI√á√ÉO 4H"),
        ("TOUR PARA PETR√ìPOLIS", "TOUR PARA PETR√ìPOLIS"),
        ("PASSEIO DE BARCO", "PASSEIO DE BARCO"),
        ("ALMO√áO RESTAURANTE", "ALMO√áO RESTAURANTE"),
        ("CORCOVADO E SANTA TERESA", "CORCOVADO E SANTA TERESA"),
        ("001 - TRANSFER VIP", "TRANSFER VIP"),
    ]
    
    print("\n=== TESTE DE LIMPEZA C/GUIA e S/GUIA ===\n")
    
    all_passed = True
    
    print("üî∏ Testando convers√µes (S/GUIA ‚Üí Sem Guia, C/GUIA ‚Üí Com Guia):")
    for original, esperado in test_cases_conversao:
        resultado = limpar_servico(original)
        passou = resultado == esperado
        all_passed = all_passed and passou
        
        status = "‚úÖ PASSOU" if passou else "‚ùå FALHOU"
        print(f"  {status} '{original}' ‚Üí '{resultado}'")
        if not passou:
            print(f"    ‚ö†Ô∏è  Esperado: '{esperado}'")
    
    print("\nüî∏ Testando N√ÉO convers√µes (servi√ßos sem S/GUIA ou C/GUIA):")
    for original, esperado in test_cases_sem_conversao:
        resultado = limpar_servico(original)
        passou = resultado == esperado
        all_passed = all_passed and passou
        
        status = "‚úÖ PASSOU" if passou else "‚ùå FALHOU"
        print(f"  {status} '{original}' ‚Üí '{resultado}'")
        if not passou:
            print(f"    ‚ö†Ô∏è  Esperado: '{esperado}'")
    
    print()
    if all_passed:
        print("üéâ TODOS OS TESTES PASSARAM!")
        return True
    else:
        print("‚ö†Ô∏è  ALGUNS TESTES FALHARAM")
        return False

if __name__ == '__main__':
    success = test_limpeza_guia()
    exit(0 if success else 1)


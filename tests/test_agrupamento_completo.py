#!/usr/bin/env python3
"""
Script para testar completamente o sistema de agrupamento conforme especifica√ß√µes
"""
import os
import sys
import django
from datetime import time

# Configurar Django
sys.path.append('/Users/anderson/my_folders/repositoriolocal/fretamento-intertouring')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'fretamento_project.settings')
django.setup()

from escalas.models import Escala, AlocacaoVan
from escalas.views import VisualizarEscalaView

class ServicoTeste:
    """Classe mock para simular servi√ßos"""
    def __init__(self, servico, horario, pax, numero_venda, local_pickup=""):
        self.servico = servico
        self.horario = horario
        self.pax = pax
        self.numero_venda = numero_venda
        self.local_pickup = local_pickup

def testar_criterios_agrupamento():
    """Testa todos os crit√©rios de agrupamento especificados"""
    print("="*70)
    print("üîç TESTE COMPLETO DO SISTEMA DE AGRUPAMENTO")
    print("="*70)
    
    view = VisualizarEscalaView()
    todos_testes_passaram = True
    
    # üîπ TESTE 1: Servi√ßos com mesmo nome e ‚â§ 40 minutos
    print("\nüîπ TESTE 1: Servi√ßos com mesmo nome e ‚â§ 40 minutos")
    print("-" * 50)
    
    servico1 = ServicoTeste("TOUR REGULAR RIO", time(8, 0), 2, "Venda001")
    servico2 = ServicoTeste("TOUR REGULAR RIO", time(8, 20), 3, "Venda002")  # 20 min diff
    servico3 = ServicoTeste("TOUR REGULAR RIO", time(9, 30), 2, "Venda003")  # 90 min diff
    
    resultado1 = view._servicos_sao_compativeis(servico1, servico2)
    resultado2 = view._servicos_sao_compativeis(servico1, servico3)
    
    print(f"   Teste 1.1 - Mesmo nome, 20 min diferen√ßa: {'‚úÖ PASSOU' if resultado1 else '‚ùå FALHOU'}")
    print(f"   Teste 1.2 - Mesmo nome, 90 min diferen√ßa: {'‚úÖ PASSOU' if not resultado2 else '‚ùå FALHOU'}")
    
    if not resultado1 or resultado2:
        todos_testes_passaram = False
    
    # üîπ TESTE 2: Transfers OUT regulares com mesmo pickup e PAX ‚â• 4
    print("\nüîπ TESTE 2: Transfers OUT regulares com mesmo pickup e PAX ‚â• 4")
    print("-" * 50)
    
    transfer1 = ServicoTeste("TRANSFER OUT REGULAR", time(9, 0), 1, "Venda003", "Hotel X")
    transfer2 = ServicoTeste("TRANSFER OUT REGULAR", time(9, 25), 3, "Venda004", "Hotel X")  # Total PAX = 4
    transfer3 = ServicoTeste("TRANSFER OUT REGULAR", time(9, 30), 1, "Venda005", "Hotel Y")  # Local diferente
    transfer4 = ServicoTeste("TRANSFER OUT REGULAR", time(9, 40), 2, "Venda006", "Hotel X")  # PAX insuficiente com transfer1
    
    resultado3 = view._servicos_sao_compativeis(transfer1, transfer2)
    resultado4 = view._servicos_sao_compativeis(transfer1, transfer3)
    resultado5 = view._servicos_sao_compativeis(transfer1, transfer4)
    
    print(f"   Teste 2.1 - Mesmo pickup, PAX total = 4: {'‚úÖ PASSOU' if resultado3 else '‚ùå FALHOU'}")
    print(f"   Teste 2.2 - Pickup diferente: {'‚úÖ PASSOU' if not resultado4 else '‚ùå FALHOU'}")
    print(f"   Teste 2.3 - Mesmo pickup, PAX total = 3: {'‚úÖ PASSOU' if not resultado5 else '‚ùå FALHOU'}")
    
    if not resultado3 or resultado4 or resultado5:
        todos_testes_passaram = False
    
    # üîπ TESTE 3: Tours com nomes similares
    print("\nüîπ TESTE 3: Tours com nomes similares")
    print("-" * 50)
    
    tour1 = ServicoTeste("TOUR PRIVATIVO", time(10, 0), 2, "Venda007")
    tour2 = ServicoTeste("TOUR REGULAR", time(10, 30), 4, "Venda008")
    tour3 = ServicoTeste("VE√çCULO + GUIA √Ä DISPOSI√á√ÉO 06 HORAS", time(10, 35), 3, "Venda009")
    tour4 = ServicoTeste("GUIA √Ä DISPOSI√á√ÉO 08 HORAS", time(10, 25), 2, "Venda010")
    tour5 = ServicoTeste("GUIA √Ä DISPOSI√á√ÉO 10 HORAS", time(10, 15), 3, "Venda011")
    
    resultado6 = view._servicos_sao_compativeis(tour1, tour2)  # Tours
    resultado7 = view._servicos_sao_compativeis(tour1, tour3)  # Tour + Ve√≠culo + Guia
    resultado8 = view._servicos_sao_compativeis(tour4, tour5)  # Guia √† disposi√ß√£o (diferentes horas)
    
    print(f"   Teste 3.1 - TOUR PRIVATIVO + TOUR REGULAR: {'‚úÖ PASSOU' if resultado6 else '‚ùå FALHOU'}")
    print(f"   Teste 3.2 - TOUR + VE√çCULO + GUIA: {'‚úÖ PASSOU' if resultado7 else '‚ùå FALHOU'}")
    print(f"   Teste 3.3 - GUIA √Ä DISPOSI√á√ÉO (8h + 10h): {'‚úÖ PASSOU' if resultado8 else '‚ùå FALHOU'}")
    
    if not resultado6 or not resultado7 or not resultado8:
        todos_testes_passaram = False
    
    # üîπ TESTE 4: Casos que N√ÉO devem ser agrupados
    print("\nüîπ TESTE 4: Casos que N√ÉO devem ser agrupados")
    print("-" * 50)
    
    servico_diff1 = ServicoTeste("TRANSFER IN REGULAR", time(11, 0), 2, "Venda012")
    servico_diff2 = ServicoTeste("TRANSFER OUT REGULAR", time(11, 10), 3, "Venda013")
    
    resultado9 = view._servicos_sao_compativeis(servico_diff1, servico_diff2)
    
    print(f"   Teste 4.1 - TRANSFER IN + TRANSFER OUT: {'‚úÖ PASSOU' if not resultado9 else '‚ùå FALHOU'}")
    
    if resultado9:
        todos_testes_passaram = False
    
    return todos_testes_passaram

def testar_funcoes_auxiliares():
    """Testa as fun√ß√µes auxiliares de verifica√ß√£o"""
    print("\nüîß TESTE DAS FUN√á√ïES AUXILIARES")
    print("-" * 50)
    
    view = VisualizarEscalaView()
    
    # Teste das fun√ß√µes de identifica√ß√£o
    testes = [
        ("_eh_transfer_out", "TRANSFER OUT REGULAR", True),
        ("_eh_transfer_out", "TRANSFER IN REGULAR", False),
        ("_eh_tour", "TOUR PRIVATIVO RIO", True),
        ("_eh_tour", "VE√çCULO + GUIA √Ä DISPOSI√á√ÉO 6 HORAS", True),
        ("_eh_tour", "TRANSFER OUT REGULAR", False),
        ("_eh_guia_disposicao", "GUIA √Ä DISPOSI√á√ÉO 08 HORAS", True),
        ("_eh_guia_disposicao", "GUIA √Ä DISPOSI√á√ÉO 10 HORAS", True),
        ("_eh_guia_disposicao", "TOUR PRIVATIVO", False),
    ]
    
    funcoes_ok = True
    for funcao_nome, texto_teste, esperado in testes:
        funcao = getattr(view, funcao_nome)
        resultado = funcao(texto_teste)
        status = "‚úÖ" if resultado == esperado else "‚ùå"
        print(f"   {funcao_nome}('{texto_teste}'): {status} {resultado} (esperado: {esperado})")
        if resultado != esperado:
            funcoes_ok = False
    
    return funcoes_ok

def testar_diferenca_horarios():
    """Testa o c√°lculo de diferen√ßa de hor√°rios"""
    print("\n‚è∞ TESTE DE DIFEREN√áA DE HOR√ÅRIOS")
    print("-" * 50)
    
    view = VisualizarEscalaView()
    
    testes_horario = [
        (time(8, 0), time(8, 20), 20),    # 20 minutos
        (time(8, 0), time(8, 40), 40),    # 40 minutos
        (time(8, 0), time(9, 30), 90),    # 90 minutos
        (time(10, 30), time(10, 0), 30),  # Ordem invertida
    ]
    
    horarios_ok = True
    for h1, h2, esperado in testes_horario:
        resultado = view._diferenca_horario_minutos(h1, h2)
        status = "‚úÖ" if abs(resultado - esperado) < 1 else "‚ùå"
        print(f"   {h1} ‚Üî {h2}: {status} {resultado:.0f} min (esperado: {esperado})")
        if abs(resultado - esperado) >= 1:
            horarios_ok = False
    
    return horarios_ok

def verificar_implementacao_principal():
    """Verifica se as fun√ß√µes principais existem"""
    print("\nüèóÔ∏è  VERIFICA√á√ÉO DA IMPLEMENTA√á√ÉO")
    print("-" * 50)
    
    view = VisualizarEscalaView()
    
    funcoes_necessarias = [
        '_servicos_sao_compativeis',
        '_normalizar_nome_servico', 
        '_diferenca_horario_minutos',
        '_eh_transfer_out',
        '_eh_tour',
        '_eh_guia_disposicao'
    ]
    
    implementacao_ok = True
    for funcao in funcoes_necessarias:
        if hasattr(view, funcao):
            print(f"   ‚úÖ {funcao} implementada")
        else:
            print(f"   ‚ùå {funcao} N√ÉO encontrada")
            implementacao_ok = False
    
    return implementacao_ok

def main():
    """Fun√ß√£o principal do teste"""
    print("üöÄ INICIANDO VERIFICA√á√ÉO COMPLETA DO SISTEMA DE AGRUPAMENTO")
    
    todos_ok = True
    
    # 1. Verificar se as fun√ß√µes existem
    if not verificar_implementacao_principal():
        print("\n‚ùå ERRO: Fun√ß√µes principais n√£o encontradas!")
        todos_ok = False
    
    # 2. Testar fun√ß√µes auxiliares
    if not testar_funcoes_auxiliares():
        print("\n‚ùå ERRO: Problemas nas fun√ß√µes auxiliares!")
        todos_ok = False
    
    # 3. Testar c√°lculo de hor√°rios
    if not testar_diferenca_horarios():
        print("\n‚ùå ERRO: Problemas no c√°lculo de hor√°rios!")
        todos_ok = False
    
    # 4. Testar crit√©rios de agrupamento
    if not testar_criterios_agrupamento():
        print("\n‚ùå ERRO: Crit√©rios de agrupamento n√£o funcionam corretamente!")
        todos_ok = False
    
    # Resultado final
    print("\n" + "="*70)
    if todos_ok:
        print("üéâ SISTEMA DE AGRUPAMENTO EST√Å FUNCIONANDO CORRETAMENTE!")
        print("‚úÖ Todos os crit√©rios especificados est√£o implementados e funcionando")
    else:
        print("‚ö†Ô∏è  SISTEMA DE AGRUPAMENTO TEM PROBLEMAS!")
        print("‚ùå Alguns crit√©rios n√£o est√£o funcionando conforme especificado")
    print("="*70)
    
    return todos_ok

if __name__ == "__main__":
    main()
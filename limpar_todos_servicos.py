#!/usr/bin/env python3
"""
Script para apagar todos os servi√ßos que foram feitos upload no sistema
"""
import os
import sys
import django
from django.db import transaction

# Configurar Django
sys.path.append('/Users/anderson/my_folders/repositoriolocal/fretamento-intertouring')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'fretamento_project.settings')
django.setup()

from core.models import Servico, GrupoServico, ServicoGrupo
from escalas.models import Escala, AlocacaoVan, GrupoServico as EscalaGrupoServico, ServicoGrupo as EscalaServicoGrupo

def contar_dados():
    """Conta todos os dados antes da exclus√£o"""
    print("üìä CONTAGEM ATUAL DE DADOS NO SISTEMA:")
    print("-" * 50)
    
    # Contar servi√ßos
    total_servicos = Servico.objects.count()
    print(f"üîπ Servi√ßos: {total_servicos}")
    
    # Contar escalas
    total_escalas = Escala.objects.count()
    print(f"üîπ Escalas: {total_escalas}")
    
    # Contar aloca√ß√µes
    total_alocacoes = AlocacaoVan.objects.count()
    print(f"üîπ Aloca√ß√µes de Van: {total_alocacoes}")
    
    # Contar grupos de servi√ßos (core)
    total_grupos_core = GrupoServico.objects.count()
    print(f"üîπ Grupos de Servi√ßo (core): {total_grupos_core}")
    
    # Contar rela√ß√µes servi√ßo-grupo (core)
    total_servico_grupo_core = ServicoGrupo.objects.count()
    print(f"üîπ Rela√ß√µes Servi√ßo-Grupo (core): {total_servico_grupo_core}")
    
    # Contar grupos de servi√ßos (escalas) - se existir
    try:
        total_grupos_escalas = EscalaGrupoServico.objects.count()
        print(f"üîπ Grupos de Servi√ßo (escalas): {total_grupos_escalas}")
    except:
        print(f"üîπ Grupos de Servi√ßo (escalas): Modelo n√£o encontrado")
    
    # Contar rela√ß√µes servi√ßo-grupo (escalas) - se existir
    try:
        total_servico_grupo_escalas = EscalaServicoGrupo.objects.count()
        print(f"üîπ Rela√ß√µes Servi√ßo-Grupo (escalas): {total_servico_grupo_escalas}")
    except:
        print(f"üîπ Rela√ß√µes Servi√ßo-Grupo (escalas): Modelo n√£o encontrado")
    
    print("-" * 50)
    return total_servicos, total_escalas, total_alocacoes

def confirmar_exclusao():
    """Solicita confirma√ß√£o do usu√°rio"""
    print("\n‚ö†Ô∏è  ATEN√á√ÉO: OPERA√á√ÉO IRREVERS√çVEL!")
    print("Esta opera√ß√£o ir√° apagar TODOS os dados de servi√ßos do sistema:")
    print("‚Ä¢ Todos os servi√ßos importados")
    print("‚Ä¢ Todas as escalas criadas") 
    print("‚Ä¢ Todas as aloca√ß√µes de vans")
    print("‚Ä¢ Todos os grupos de servi√ßos")
    print("‚Ä¢ Todas as rela√ß√µes entre servi√ßos e grupos")
    
    resposta = input("\n‚ùì Tem certeza que deseja continuar? Digite 'CONFIRMO' para prosseguir: ")
    return resposta.upper() == 'CONFIRMO'

def apagar_todos_dados():
    """Apaga todos os dados do sistema"""
    print("\nüóëÔ∏è  INICIANDO EXCLUS√ÉO DE DADOS...")
    print("=" * 60)
    
    try:
        with transaction.atomic():
            # 1. Apagar rela√ß√µes servi√ßo-grupo (core)
            print("üîÑ Apagando rela√ß√µes Servi√ßo-Grupo (core)...")
            count = ServicoGrupo.objects.count()
            ServicoGrupo.objects.all().delete()
            print(f"   ‚úÖ {count} rela√ß√µes apagadas")
            
            # 2. Apagar rela√ß√µes servi√ßo-grupo (escalas) - se existir
            try:
                print("üîÑ Apagando rela√ß√µes Servi√ßo-Grupo (escalas)...")
                count = EscalaServicoGrupo.objects.count()
                EscalaServicoGrupo.objects.all().delete()
                print(f"   ‚úÖ {count} rela√ß√µes apagadas")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Modelo n√£o encontrado ou erro: {e}")
            
            # 3. Apagar grupos de servi√ßos (core)
            print("üîÑ Apagando Grupos de Servi√ßos (core)...")
            count = GrupoServico.objects.count()
            GrupoServico.objects.all().delete()
            print(f"   ‚úÖ {count} grupos apagados")
            
            # 4. Apagar grupos de servi√ßos (escalas) - se existir
            try:
                print("üîÑ Apagando Grupos de Servi√ßos (escalas)...")
                count = EscalaGrupoServico.objects.count()
                EscalaGrupoServico.objects.all().delete()
                print(f"   ‚úÖ {count} grupos apagados")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Modelo n√£o encontrado ou erro: {e}")
            
            # 5. Apagar aloca√ß√µes de vans
            print("üîÑ Apagando Aloca√ß√µes de Vans...")
            count = AlocacaoVan.objects.count()
            AlocacaoVan.objects.all().delete()
            print(f"   ‚úÖ {count} aloca√ß√µes apagadas")
            
            # 6. Apagar escalas
            print("üîÑ Apagando Escalas...")
            count = Escala.objects.count()
            Escala.objects.all().delete()
            print(f"   ‚úÖ {count} escalas apagadas")
            
            # 7. Apagar servi√ßos (por √∫ltimo, pois outros dependem dele)
            print("üîÑ Apagando Servi√ßos...")
            count = Servico.objects.count()
            Servico.objects.all().delete()
            print(f"   ‚úÖ {count} servi√ßos apagados")
            
            print("\n‚úÖ EXCLUS√ÉO CONCLU√çDA COM SUCESSO!")
            
    except Exception as e:
        print(f"\n‚ùå ERRO durante a exclus√£o: {e}")
        print("üí° A transa√ß√£o foi revertida. Nenhum dado foi perdido.")
        return False
    
    return True

def verificar_limpeza():
    """Verifica se a limpeza foi bem-sucedida"""
    print("\nüîç VERIFICA√á√ÉO P√ìS-LIMPEZA:")
    print("-" * 40)
    
    servicos_restantes = Servico.objects.count()
    escalas_restantes = Escala.objects.count()
    alocacoes_restantes = AlocacaoVan.objects.count()
    grupos_restantes = GrupoServico.objects.count()
    relacoes_restantes = ServicoGrupo.objects.count()
    
    print(f"üîπ Servi√ßos restantes: {servicos_restantes}")
    print(f"üîπ Escalas restantes: {escalas_restantes}")
    print(f"üîπ Aloca√ß√µes restantes: {alocacoes_restantes}")
    print(f"üîπ Grupos restantes: {grupos_restantes}")
    print(f"üîπ Rela√ß√µes restantes: {relacoes_restantes}")
    
    if all(count == 0 for count in [servicos_restantes, escalas_restantes, alocacoes_restantes, grupos_restantes, relacoes_restantes]):
        print("\nüéâ SISTEMA COMPLETAMENTE LIMPO!")
        return True
    else:
        print("\n‚ö†Ô∏è  Alguns dados ainda restam no sistema.")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üßπ LIMPEZA COMPLETA DO SISTEMA DE FRETAMENTO")
    print("=" * 60)
    
    # 1. Contar dados atuais
    contar_dados()
    
    # 2. Solicitar confirma√ß√£o
    if not confirmar_exclusao():
        print("\n‚ùå Opera√ß√£o cancelada pelo usu√°rio.")
        return
    
    # 3. Executar limpeza
    sucesso = apagar_todos_dados()
    
    if sucesso:
        # 4. Verificar se a limpeza foi bem-sucedida
        verificar_limpeza()
        
        print("\n" + "=" * 60)
        print("‚úÖ LIMPEZA CONCLU√çDA!")
        print("O sistema est√° agora completamente limpo e pronto para novos uploads.")
        print("=" * 60)
    else:
        print("\n" + "=" * 60)
        print("‚ùå LIMPEZA FALHOU!")
        print("Verifique os erros acima e tente novamente.")
        print("=" * 60)

if __name__ == "__main__":
    main()
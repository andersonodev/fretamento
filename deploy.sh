#!/bin/bash

# Script de Deploy - Fretamento Intertouring
# Este script automatiza o processo de deploy para produ√ß√£o

set -e  # Parar em caso de erro

echo "üöÄ Iniciando deploy do Fretamento Intertouring..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para logging
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

# Verificar se est√° no diret√≥rio correto
if [ ! -f "manage.py" ]; then
    error "Script deve ser executado no diret√≥rio raiz do projeto Django"
fi

# 1. Verificar depend√™ncias
log "Verificando depend√™ncias..."

if ! command -v docker &> /dev/null; then
    warn "Docker n√£o encontrado. Instalando via script de conveni√™ncia..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    sudo usermod -aG docker $USER
    rm get-docker.sh
    log "Docker instalado. Fa√ßa logout/login para aplicar permiss√µes de grupo."
fi

if ! command -v docker-compose &> /dev/null; then
    warn "Docker Compose n√£o encontrado. Instalando..."
    sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    log "Docker Compose instalado."
fi

# 2. Verificar arquivo .env
if [ ! -f ".env" ]; then
    warn "Arquivo .env n√£o encontrado. Copiando template..."
    cp .env.example .env
    warn "Configure o arquivo .env antes de continuar!"
    read -p "Pressione Enter para continuar ap√≥s configurar o .env..."
fi

# 3. Criar diret√≥rios necess√°rios
log "Criando diret√≥rios necess√°rios..."
mkdir -p logs
mkdir -p nginx/ssl
mkdir -p backups

# 4. Gerar certificados SSL auto-assinados (para desenvolvimento)
if [ ! -f "nginx/ssl/cert.pem" ]; then
    log "Gerando certificados SSL auto-assinados..."
    openssl req -x509 -newkey rsa:4096 -keyout nginx/ssl/key.pem -out nginx/ssl/cert.pem -days 365 -nodes \
        -subj "/C=BR/ST=SP/L=Sao Paulo/O=Fretamento Intertouring/CN=localhost"
    warn "Usando certificados auto-assinados. Para produ√ß√£o, use certificados v√°lidos!"
fi

# 5. Build da aplica√ß√£o
log "Fazendo build da aplica√ß√£o..."
docker-compose build

# 6. Iniciar servi√ßos
log "Iniciando servi√ßos..."
docker-compose up -d db redis

# Aguardar banco de dados estar pronto
log "Aguardando banco de dados..."
sleep 10

# 7. Executar migra√ß√µes
log "Executando migra√ß√µes..."
docker-compose run --rm web python manage.py migrate --settings=fretamento_project.settings_production

# 8. Coletar arquivos est√°ticos
log "Coletando arquivos est√°ticos..."
docker-compose run --rm web python manage.py collectstatic --noinput --settings=fretamento_project.settings_production

# 9. Criar superusu√°rio (se n√£o existir)
log "Verificando superusu√°rio..."
if ! docker-compose run --rm web python manage.py shell --settings=fretamento_project.settings_production -c "
from django.contrib.auth.models import User
if not User.objects.filter(is_superuser=True).exists():
    exit(1)
"; then
    log "Criando superusu√°rio..."
    docker-compose run --rm web python manage.py createsuperuser --settings=fretamento_project.settings_production
fi

# 10. Iniciar todos os servi√ßos
log "Iniciando todos os servi√ßos..."
docker-compose up -d

# 11. Verificar sa√∫de dos servi√ßos
log "Verificando sa√∫de dos servi√ßos..."
sleep 15

# Verificar se os servi√ßos est√£o rodando
if ! docker-compose ps | grep -q "Up"; then
    error "Alguns servi√ßos n√£o est√£o rodando corretamente"
fi

# 12. Executar testes b√°sicos
log "Executando verifica√ß√µes b√°sicas..."
if curl -f http://localhost/health/ > /dev/null 2>&1; then
    log "‚úÖ Aplica√ß√£o respondendo na porta 80"
else
    warn "‚ö†Ô∏è Aplica√ß√£o n√£o est√° respondendo na porta 80"
fi

# 13. Backup inicial
log "Criando backup inicial..."
docker-compose exec -T db pg_dump -U fretamento_user fretamento_prod > "backups/initial_backup_$(date +%Y%m%d_%H%M%S).sql"

# 14. Configurar scripts de manuten√ß√£o
log "Configurando scripts de manuten√ß√£o..."

# Script de backup
cat > backup.sh << 'EOF'
#!/bin/bash
BACKUP_DIR="backups"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

# Criar backup do banco
docker-compose exec -T db pg_dump -U fretamento_user fretamento_prod > "$BACKUP_DIR/backup_$TIMESTAMP.sql"

# Manter apenas os √∫ltimos 7 backups
ls -t $BACKUP_DIR/backup_*.sql | tail -n +8 | xargs -r rm

echo "Backup criado: backup_$TIMESTAMP.sql"
EOF

chmod +x backup.sh

# Script de atualiza√ß√£o
cat > update.sh << 'EOF'
#!/bin/bash
echo "Atualizando aplica√ß√£o..."

# Fazer backup antes da atualiza√ß√£o
./backup.sh

# Atualizar c√≥digo
git pull

# Rebuild e restart
docker-compose build
docker-compose up -d

# Executar migra√ß√µes
docker-compose run --rm web python manage.py migrate --settings=fretamento_project.settings_production

# Coletar est√°ticos
docker-compose run --rm web python manage.py collectstatic --noinput --settings=fretamento_project.settings_production

echo "Atualiza√ß√£o conclu√≠da!"
EOF

chmod +x update.sh

# Script de logs
cat > logs.sh << 'EOF'
#!/bin/bash
echo "Escolha o servi√ßo para ver os logs:"
echo "1) Web Application"
echo "2) Database"
echo "3) Redis"
echo "4) Nginx"
echo "5) Todos"

read -p "Op√ß√£o (1-5): " option

case $option in
    1) docker-compose logs -f web ;;
    2) docker-compose logs -f db ;;
    3) docker-compose logs -f redis ;;
    4) docker-compose logs -f nginx ;;
    5) docker-compose logs -f ;;
    *) echo "Op√ß√£o inv√°lida" ;;
esac
EOF

chmod +x logs.sh

# 15. Configurar crontab para backups autom√°ticos
log "Configurando backups autom√°ticos..."
(crontab -l 2>/dev/null; echo "0 2 * * * cd $(pwd) && ./backup.sh") | crontab -

log "‚úÖ Deploy conclu√≠do com sucesso!"
log ""
log "üåê Aplica√ß√£o dispon√≠vel em:"
log "   - HTTP: http://localhost"
log "   - HTTPS: https://localhost (certificado auto-assinado)"
log ""
log "üîß Scripts dispon√≠veis:"
log "   - ./backup.sh - Criar backup manual"
log "   - ./update.sh - Atualizar aplica√ß√£o"
log "   - ./logs.sh - Ver logs dos servi√ßos"
log ""
log "üìä Comandos √∫teis:"
log "   - docker-compose ps - Status dos servi√ßos"
log "   - docker-compose logs -f - Ver todos os logs"
log "   - docker-compose down - Parar todos os servi√ßos"
log "   - docker-compose up -d - Iniciar todos os servi√ßos"
log ""
log "‚ö†Ô∏è  IMPORTANTE:"
log "   - Configure certificados SSL v√°lidos para produ√ß√£o"
log "   - Ajuste as vari√°veis de ambiente no arquivo .env"
log "   - Configure firewall para expor apenas portas 80 e 443"
log "   - Considere usar um proxy reverso como Cloudflare"
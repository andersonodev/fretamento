#!/usr/bin/env python
"""
Script para limpar TODOS os dados do sistema de fretamento
Remove todos os servi√ßos, escalas, aloca√ß√µes e processamentos de planilhas
"""

import os
import sys
import django

# Setup Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'fretamento_project.settings')
django.setup()

from core.models import Servico, ProcessamentoPlanilha, GrupoServico
from escalas.models import Escala, AlocacaoVan, GrupoServico as EscalaGrupoServico, ServicoGrupo
from django.db import transaction

def confirmar_limpeza():
    """Solicita confirma√ß√£o do usu√°rio antes de prosseguir"""
    print("üö® ATEN√á√ÉO: OPERA√á√ÉO DESTRUTIVA üö®")
    print("="*50)
    print("Esta opera√ß√£o ir√° APAGAR PERMANENTEMENTE:")
    print("‚úó Todos os servi√ßos importados")
    print("‚úó Todas as escalas criadas") 
    print("‚úó Todas as aloca√ß√µes de vans")
    print("‚úó Todos os grupos de servi√ßos")
    print("‚úó Todo o hist√≥rico de processamento de planilhas")
    print("‚úó Todos os dados relacionados")
    print("="*50)
    
    # Mostrar estat√≠sticas atuais
    print("\nüìä DADOS ATUAIS NO SISTEMA:")
    print(f"‚Ä¢ Servi√ßos: {Servico.objects.count()}")
    print(f"‚Ä¢ Escalas: {Escala.objects.count()}")
    print(f"‚Ä¢ Aloca√ß√µes: {AlocacaoVan.objects.count()}")
    print(f"‚Ä¢ Processamentos: {ProcessamentoPlanilha.objects.count()}")
    
    print("\n‚ö†Ô∏è  ESTA A√á√ÉO N√ÉO PODE SER DESFEITA! ‚ö†Ô∏è")
    
    while True:
        resposta = input("\nDeseja continuar? Digite 'CONFIRMAR' para prosseguir ou 'cancelar' para sair: ").strip()
        
        if resposta == 'CONFIRMAR':
            return True
        elif resposta.lower() in ['cancelar', 'cancel', 'n√£o', 'nao', 'n']:
            return False
        else:
            print("‚ùå Resposta inv√°lida. Digite 'CONFIRMAR' ou 'cancelar'")

def limpar_dados():
    """Remove todos os dados do sistema"""
    print("\nüßπ INICIANDO LIMPEZA DOS DADOS...")
    
    try:
        with transaction.atomic():
            # 1. Remover aloca√ß√µes e grupos de escalas (ordem importa devido √†s FKs)
            print("üóëÔ∏è  Removendo aloca√ß√µes de vans...")
            alocacoes_removidas = AlocacaoVan.objects.count()
            AlocacaoVan.objects.all().delete()
            print(f"   ‚úÖ {alocacoes_removidas} aloca√ß√µes removidas")
            
            print("üóëÔ∏è  Removendo grupos de servi√ßos das escalas...")
            servico_grupos_removidos = ServicoGrupo.objects.count()
            ServicoGrupo.objects.all().delete()
            print(f"   ‚úÖ {servico_grupos_removidos} servi√ßos de grupos removidos")
            
            escalas_grupos_removidos = EscalaGrupoServico.objects.count()
            EscalaGrupoServico.objects.all().delete()
            print(f"   ‚úÖ {escalas_grupos_removidos} grupos de escalas removidos")
            
            # 2. Remover escalas
            print("üóëÔ∏è  Removendo escalas...")
            escalas_removidas = Escala.objects.count()
            Escala.objects.all().delete()
            print(f"   ‚úÖ {escalas_removidas} escalas removidas")
            
            # 3. Remover grupos de servi√ßos gerais
            print("üóëÔ∏è  Removendo grupos de servi√ßos...")
            grupos_removidos = GrupoServico.objects.count()
            GrupoServico.objects.all().delete()
            print(f"   ‚úÖ {grupos_removidos} grupos removidos")
            
            # 4. Remover todos os servi√ßos
            print("üóëÔ∏è  Removendo todos os servi√ßos...")
            servicos_removidos = Servico.objects.count()
            Servico.objects.all().delete()
            print(f"   ‚úÖ {servicos_removidos} servi√ßos removidos")
            
            # 5. Remover hist√≥rico de processamentos
            print("üóëÔ∏è  Removendo hist√≥rico de processamentos...")
            processamentos_removidos = ProcessamentoPlanilha.objects.count()
            ProcessamentoPlanilha.objects.all().delete()
            print(f"   ‚úÖ {processamentos_removidos} processamentos removidos")
            
        print("\nüéâ LIMPEZA CONCLU√çDA COM SUCESSO!")
        print("="*50)
        print("‚úÖ Todos os dados foram removidos do sistema")
        print("‚úÖ O banco de dados est√° limpo e pronto para novos dados")
        print("‚úÖ Voc√™ pode agora fazer upload de novas planilhas")
        
        # Verificar se realmente est√° vazio
        print("\nüìä VERIFICA√á√ÉO FINAL:")
        print(f"‚Ä¢ Servi√ßos: {Servico.objects.count()}")
        print(f"‚Ä¢ Escalas: {Escala.objects.count()}")
        print(f"‚Ä¢ Aloca√ß√µes: {AlocacaoVan.objects.count()}")
        print(f"‚Ä¢ Processamentos: {ProcessamentoPlanilha.objects.count()}")
        
        if (Servico.objects.count() == 0 and 
            Escala.objects.count() == 0 and 
            AlocacaoVan.objects.count() == 0 and 
            ProcessamentoPlanilha.objects.count() == 0):
            print("\n‚úÖ VERIFICA√á√ÉO PASSOU: Sistema completamente limpo!")
        else:
            print("\n‚ö†Ô∏è  Alguns dados ainda permanecem no sistema")
            
    except Exception as e:
        print(f"\n‚ùå ERRO durante a limpeza: {e}")
        print("üîÑ Opera√ß√£o revertida automaticamente (transa√ß√£o)")
        return False
    
    return True

def main():
    """Fun√ß√£o principal"""
    print("üßπ LIMPEZA COMPLETA DO SISTEMA DE FRETAMENTO")
    print("="*50)
    
    if not confirmar_limpeza():
        print("\n‚ùå Opera√ß√£o cancelada pelo usu√°rio")
        print("‚úÖ Nenhum dado foi modificado")
        return
    
    print("\n‚è≥ Processando...")
    
    if limpar_dados():
        print("\nüéØ PR√ìXIMOS PASSOS:")
        print("1. Acesse /core/upload/ para fazer upload de novas planilhas")
        print("2. Processe os dados com o novo formato brasileiro corrigido")
        print("3. Crie novas escalas com os dados limpos")
        
    print("\nüèÅ Script finalizado!")

if __name__ == "__main__":
    main()